# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  profile: himikos
  region: us-east-1
  stage: dev
  environment: 
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'  



plugins:
  - serverless-python-requirements
  

custom:
  tableName: player-points
  bucketName: myserverlessprojectuploadbucket-99199
  imageUploadBucket: my-image-upload-bucket-demo-pwpw
  pythonRequirements:
    PythonBin: python3
    dockerizePip: non-linux

package:
  individually: True
  patterns:
  - "**/**"
  - "!node_modules/**"
  - "!UploadData/**"
  - "!package-lock.json"
  - "!serverless.yml"     

functions:
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true 
  createPlayerScore:
    handler : lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method : POST
          cors: true
  sendEmail:
    handler : lambdas/endpoints/sendEmail.handler
    events:
      - http:
          path: send-email
          method : POST
          cors: true
  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - http:
          path: update-player-score/{ID}
          method: PUT
          cors: true  
  getGameScore:
    handler: lambdas/endpoints/getGameScore.handler
    events:
      - http:
          path: get-game-score/{game}
          method: GET
          cors: true
  imageUpload:
    handler: lambdas/endpoints/imageUpload.handler
    events:
      - http:
          path: image-upload
          method: POST
          cors: true        
      

           
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName} 
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead    
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S  
        KeySchema:
          - AttributeName: ID
            KeyType: HASH    
        BillingMode: PAY_PER_REQUEST  

        GlobalSecondaryIndexes:
          - IndexName: game-index
            KeySchema: 
              - AttributeName: game
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:  
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false              
            
                       
